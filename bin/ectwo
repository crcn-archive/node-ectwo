#!/usr/bin/env node
require("colors");

var ectwo = require(".."),
path = require("path"),
flatten = require("flatten"),
_ = require("underscore"),
sprintf = require("sprintf").sprintf,
async = require("async"),
type = require("type-component"),
readline = require("readline"),
argv = cli  = require("optimist").
usage("Usage: $0 [commands...] -c [config] -p [profile] -r [regions]").
demand(["c", "p"]).
describe("r", "regions to use").
describe("i", "interactive").
describe("c", "configuration location").
describe("p", "profile to use").
default("c", "/usr/local/etc/ectwo/conf").
default("p", "default").
default("i", false).
default("r");

argv = cli.argv;


if(argv.help) {
  cli.showHelp();
  process.exit(0);
}


var config = require(argv.c).profiles[argv.p];
config.regions = argv.r ? argv.r.split(",") : config.regions || ectwo.regions;

var ec2 = ectwo(config);
ec2.use(require("../lib/plugins/terminal"));


var chain      = ec2.chain(),
regions        = chain.regions,
instances      = regions().find().instances,
images         = regions().find().images,
keyPairs       = regions().find().keyPairs,
securityGroups = regions().find().securityGroups,
addresses      = regions().find().addresses;




function startLoader() {

  var loaded = false,
  startTime = Date.now();
  var interval = setInterval(function() {
    loaded = true;
    process.stdout.write(".".grey);
  }, 1000);

  return {
    stop: function() {
      clearInterval(interval);

      if(loaded)
        process.stdout.write(sprintf(" %s s".grey, ((Date.now() - startTime) / 1000).toFixed(2)))

      process.stdout.write("\n");
    }
  }
}

var stopReadline, _init;

function init() {
  if(_init) return;
  _init = true;

  chain.on("call", function(options) {
    process.stdout.write(sprintf("%s.%s(%s) ".cyan, options.target, options.method, options.args.map(function(arg) {
      return JSON.stringify(arg);
    }).join(", ")));
    var loader = startLoader();
    options.chain.once("result", loader.stop);
    options.chain.once("error", loader.stop);
  });

}

function executeCommand(command, next) {

  init();
  var commands = command.split(";");

  async.eachSeries(commands, function(command, next) {

    try {
      var cchain = eval(command);
    } catch(e) {
      return next(e);
    }

    if(!cchain || !cchain.then) return chain.then(next);

    cchain.then(function(err, results) {
      if(err) return next(err);

      if(results.length == 1)
        results = results[0]

      var t;
      if(/array|object/.test(t = type(results))) {

        var vanilla = JSON.parse(JSON.stringify(results));

        if(t == "array") {
          vanilla = flatten(vanilla);
        }

        //print the result
        console.log(JSON.stringify(vanilla, null, 2));
      } else {
        console.log(results);
      }

      next();
    });

  }, function(err) {

    if(err) {
      console.error("Error: %s", err.message);
    }

    chain.then(next);
  });
}

function startInteractive() {
  rl = readline.createInterface({
    input  : process.stdin,
    output : process.stdout
  });
  execLine();
}


function execLine() {
  rl.question("> ", function(code) {
    executeCommand(code, execLine);
  });
}

console.log("\n------------------------------------\n");
console.log("Profile: %s", argv.p);
console.log("Regions: %s", config.regions.join(", "));
console.log("\n------------------------------------\n");

chain.then(function() {
  executeCommand(argv._.join(";"), function() {
    if(argv.i) {
      chain.then(startInteractive);
    }
  });
});



