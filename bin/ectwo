#!/usr/bin/env node
var ectwo = require(".."),
path = require("path"),
flatten = require("flatten"),
_ = require("underscore"),
argv = optimist  = require("optimist").
usage("Usage: $0 -c [config] -p [profile] -r [regions]").
demand(["c", "p"]).
default("c", "/usr/local/etc/ectwo/conf").
default("p", "default").
default("r", ectwo.regions.join(",")).
argv;

require("colors");

argv.r = argv.r.split(",")

var config = require(argv.c).profiles[argv.p];
config.regions = argv.r;

var ec2 = ectwo(config);

ec2.use(require("../lib/plugins/terminal"));

var readline = require("readline"),
rl = readline.createInterface({
  input  : process.stdin,
  output : process.stdout
});


var chain = ec2.chain(),
regions     = chain.regions,
instances   = regions().find().instances,
images      = regions().find().images,
keyPairs    = regions().find().keyPairs;



function startLoader() {

  var loaded = false,
  startTime = Date.now();
  var interval = setInterval(function() {
    loaded = true;
    process.stdout.write(".");
  }, 1000);

  return {
    stop: function() {

      clearInterval(interval);
      if(loaded) {
        console.log(" %d s", ((Date.now() - startTime) / 1000).toFixed(2));
      }
    }
  }
}

var stopReadline, _init;

chain.on("stopReadLine", function() {
  stopReadline = true;
});

function init() {
  if(_init) return;
  _init = true;
  
  chain.on("call", function(options) {
    console.log("%s.%s(%s)".cyan, options.target, options.method, options.args.join(","))
  });

}

function execLine() {
  init();
  if(stopReadline) return;
  rl.question("> ", function(code) {
    try {
      var chain = eval(code);

    //syntax error?
    } catch(e) {
      console.error(e.message);
      return execLine();
    }

    if(!chain || !chain.then) return execLine();

    //start the dots loader
    // var loader = startLoader();

    chain.then(function(err, results) {

      // loader.stop();

      if(err) {
         console.error("Error: %s", err.message);
         return execLine();
      }

      if(stopReadline) return;

      vanilla = flatten(JSON.parse(JSON.stringify(results)));


      //print the result
      console.log(JSON.stringify(vanilla, null, 2));


      //read the next line
      setTimeout(execLine, 100);
    });
  });
}


console.log("\n------------------------------------\n");
console.log("Profile: %s", argv.p);
console.log("Regions: %s", argv.r.join(", "));
console.log("\n------------------------------------\n");

chain.then(execLine);



