#!/usr/bin/env node
var ectwo = require(".."),
path = require("path"),
flatten = require("flatten"),
argv = optimist  = require("optimist").
usage("Usage: $0 -c [config] -p [profile]").
demand(["c", "p"]).
default("c", "/usr/local/etc/ectwo/conf").
default("p", "default").
argv;

var ec2 = ectwo(require(argv.c).profiles[argv.p]);


var readline = require("readline"),
rl = readline.createInterface({
  input  : process.stdin,
  output : process.stdout
});

var regions = ec2.chain().regions,
instances   = regions().find().instances,
images      = regions().find().images


function startLoader() {

  var loaded = false,
  startTime = Date.now();
  var interval = setInterval(function() {
    loaded = true;
    process.stdout.write(".");
  }, 1000);

  return {
    stop: function() {

      clearInterval(interval);
      if(loaded) {
        console.log(" %d s", ((Date.now() - startTime) / 1000).toFixed(2));
      }
    }
  }
}

function execLine() {
  rl.question("> ", function(code) {
    try {
      var chain = eval(code);

    //syntax error?
    } catch(e) {
      console.error(e.message);
      return execLine();
    }

    if(!chain || !chain.then) return execLine();

    //start the dots loader
    var loader = startLoader();

    chain.then(function(err, results) {

      loader.stop();

      if(err) {
         console.error("Error: %s", err.message);
         return execLine();
      }

      vanilla = flatten(JSON.parse(JSON.stringify(results)));


      //print the result
      console.log(JSON.stringify(vanilla, null, 2));


      //read the next line
      execLine();
    });
  });
}


console.log("\n------------------------------------\n");
console.log("Profile: %s", argv.p);
console.log("\n------------------------------------\n");

execLine();



