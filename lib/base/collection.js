// Generated by CoffeeScript 1.6.2
(function() {
  var BaseCollection, bindable, comerr, hurryup, memoize, outcome, sift,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  sift = require("sift");

  memoize = require("memoize");

  outcome = require("outcome");

  bindable = require("bindable");

  hurryup = require("hurryup");

  comerr = require("comerr");

  BaseCollection = (function(_super) {
    __extends(BaseCollection, _super);

    /*
    */


    function BaseCollection(options) {
      this.options = options;
      this.reload = __bind(this.reload, this);
      BaseCollection.__super__.constructor.call(this);
      this.load = memoize(this.reload, {
        expire: false
      });
    }

    /*
    */


    BaseCollection.prototype.waitForOne = function(query, timeout, next) {
      if (arguments.length === 2) {
        next = timeout;
        timeout = 1000 * 60;
      }
      return this.wait(query, timeout, function(err, items) {
        if (err != null) {
          return next(err);
        }
        return next(null, items[0]);
      });
    };

    /*
    */


    BaseCollection.prototype.wait = function(query, timeout, next) {
      var fn,
        _this = this;

      if (arguments.length === 2) {
        next = timeout;
        timeout = 1000 * 60;
      }
      fn = hurryup((function(next) {
        return _this.reload(function() {
          return _this.find(query, function(err, items) {
            if (err != null) {
              return next(err);
            }
            if (!items.length) {
              return next(comerr.notFound());
            }
            return next(null, items);
          });
        });
      }), {
        timeout: timeout,
        retry: true,
        retryTimeout: 1000 * 5
      });
      return fn(next);
    };

    /*
    */


    BaseCollection.prototype.find = function(query, next) {
      if (arguments.length === 1) {
        next = query;
        query = function() {
          return true;
        };
      }
      return this.load({
        mem: true
      }, outcome.e(next).s(function(results) {
        var sifter;

        sifter = sift(query);
        results = results.filter(function(item) {
          return sifter.test(item.context());
        });
        return next(null, results);
      }));
    };

    /*
    */


    BaseCollection.prototype.reload = function(options, next) {
      var _this = this;

      if (next == null) {
        next = function() {};
      }
      if (arguments.length === 1) {
        next = options;
        options = {};
      }
      return this._load2(options, outcome.e(next).s(function(results) {
        var eitem, existing, found, i, item, newItems, _i, _j, _k, _l, _len, _len1, _len2, _len3;

        existing = _this.source().concat();
        newItems = results.concat();
        for (i = _i = 0, _len = existing.length; _i < _len; i = ++_i) {
          eitem = existing[i];
          found = false;
          for (_j = 0, _len1 = newItems.length; _j < _len1; _j++) {
            item = newItems[_j];
            if (eitem.get("_id") === item._id) {
              found = true;
              break;
            }
          }
          if (!found) {
            _this.splice(i, 1);
          }
        }
        existing = _this.source().concat();
        for (i = _k = 0, _len2 = newItems.length; _k < _len2; i = ++_k) {
          item = newItems[i];
          found = false;
          for (_l = 0, _len3 = existing.length; _l < _len3; _l++) {
            eitem = existing[_l];
            if (eitem.get("_id") === item._id) {
              found = true;
              results.splice(i, 1);
              eitem.reset(item);
              break;
            }
          }
          if (!found) {
            _this.push(_this._model(item));
          }
        }
        return next(null, _this.source());
      }));
    };

    /*
    */


    BaseCollection.prototype._model = function(data) {
      return new this.options.modelClass(data, this);
    };

    /*
    */


    BaseCollection.prototype._load2 = function(next) {
      return next(null, []);
    };

    return BaseCollection;

  })(bindable.Collection);

  module.exports = BaseCollection;

}).call(this);
