// Generated by CoffeeScript 1.6.2
(function() {
  var BaseRegionModel, hurryup, outcome, type,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  type = require("type-component");

  outcome = require("outcome");

  hurryup = require("hurryup");

  BaseRegionModel = (function(_super) {
    __extends(BaseRegionModel, _super);

    /*
    */


    function BaseRegionModel(data, collection) {
      var _ref;

      BaseRegionModel.__super__.constructor.call(this, data, collection);
      this.region = this.collection.region;
      this.api = (_ref = this.region) != null ? _ref.api : void 0;
    }

    /*
      adds a tag
    */


    BaseRegionModel.prototype.tag = function(nameOrTags, value, next) {
      var createTags, deleteTags, i, name, tag, tags, tryTagging, _results,
        _this = this;

      if (arguments.length === 2) {
        next = value;
        value = void 0;
        tags = nameOrTags;
      } else {
        tags = {};
        tags[nameOrTags] = value;
      }
      createTags = {};
      deleteTags = {};
      i = 1;
      _results = [];
      for (name in tags) {
        tag = tags[name];
        if (tag != null) {
          createTags[name] = String(tag);
        }
        deleteTags[name] = void 0;
        tryTagging = function(next) {
          return _this._modifyTags("CreateTags", createTags, outcome.e(next).s(function() {
            return _this.reload(function() {
              if (!_this.synced({
                tags: createTags
              })) {
                return next(new Error("tag changes haven't been made"));
              }
              return next(null, _this);
            });
          }));
        };
        _results.push(this._modifyTags("DeleteTags", deleteTags, function() {
          return hurryup(tryTagging, {
            timeout: 1000 * 60 * 3,
            retry: true,
            retryTimeout: 1000
          }).call(_this, next);
        }));
      }
      return _results;
    };

    /*
    */


    BaseRegionModel.prototype._modifyTags = function(method, tags, next) {
      var i, name, query;

      query = {
        "ResourceId.1": this.get("_id")
      };
      i = 0;
      for (name in tags) {
        query["Tag." + (++i) + ".Key"] = name;
        if (tags[name] != null) {
          query["Tag." + i + ".Value"] = tags[name];
        }
      }
      if (i === 0) {
        return next();
      }
      return this.api.call(method, query, next);
    };

    return BaseRegionModel;

  })(require("./model"));

  module.exports = BaseRegionModel;

}).call(this);
