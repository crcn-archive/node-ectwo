// Generated by CoffeeScript 1.6.2
(function() {
  var BaseModel, bindable, hurryup, outcome, sift,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bindable = require("bindable");

  hurryup = require("hurryup");

  outcome = require("outcome");

  sift = require("sift");

  BaseModel = (function(_super) {
    __extends(BaseModel, _super);

    /*
    */


    function BaseModel(data, collection) {
      var _ref;

      this.collection = collection;
      BaseModel.__super__.constructor.call(this, data);
      this.region = this.collection.region;
      this.api = (_ref = this.region) != null ? _ref.api : void 0;
    }

    /*
    */


    BaseModel.prototype.reload = function(next) {
      return this._load(next);
    };

    /*
    */


    BaseModel.prototype.toJSON = function() {
      return this.context();
    };

    /*
    */


    BaseModel.prototype.reset = function(data) {
      return this.set(data);
    };

    /*
    */


    BaseModel.prototype.destroy = function(next) {
      var _this = this;

      return this._destroy(outcome.e(next).s(function() {
        _this.dispose();
        return next(null, _this);
      }));
    };

    /*
    */


    BaseModel.prototype._destroy = function(next) {
      return next();
    };

    /*
    */


    BaseModel.prototype._load = function(next) {
      return this.collection.reload({
        _id: this.get("_id")
      }, function() {
        return next();
      });
    };

    /*
    */


    BaseModel.prototype.skip = function(properties, skip, load) {
      if (this.synced(properties)) {
        return skip(null, this);
      }
      return load();
    };

    /*
    */


    BaseModel.prototype.synced = function(properties) {
      return sift(properties).test(this.context());
    };

    /*
    */


    BaseModel.prototype.wait = function(properties, next) {
      var fn, load,
        _this = this;

      load = function(next) {
        return _this.reload(outcome.e(next).s(function() {
          if (!_this.synced(properties)) {
            return next(new Error("unable to sync properties"));
          }
          return next(null, _this);
        }));
      };
      fn = hurryup(load, {
        retry: true,
        timeout: 1000 * 60 * 20,
        retryTimeout: 1000 * 3
      });
      return fn(next);
    };

    return BaseModel;

  })(bindable.Object);

  module.exports = BaseModel;

}).call(this);
