// Generated by CoffeeScript 1.6.2
(function() {
  var fastener, _load, _reload;

  fastener = require("fasten")();

  fastener.add("ectwo", {
    regions: {
      type: "regions",
      call: function(next) {
        return _load(this.regions, next);
      }
    }
  });

  _load = function(collection, next) {
    return collection.load({}, function() {
      return next(null, collection);
    });
  };

  _reload = function(collection, next) {
    return collection.reload({}, function() {
      return next(null, collection);
    });
  };

  fastener.add("regions", {
    find: {
      type: "region"
    },
    reload: {
      type: "region"
    }
  });

  fastener.add("instances", {
    find: {
      type: "instance"
    },
    reload: {
      type: "instances",
      call: function(next) {
        return _reload(this, next);
      }
    },
    create: {
      type: "instance"
    }
  });

  fastener.add("images", {
    find: {
      type: "image"
    },
    reload: {
      type: "images",
      call: function(next) {
        return _reload(this, next);
      }
    }
  });

  fastener.add("object", {});

  fastener.add("addresses", {
    find: {
      type: "address"
    },
    reload: {
      type: "addresses",
      call: function(next) {
        return _reload(this, next);
      }
    }
  });

  fastener.add("securityGroups", {
    find: {
      type: "securityGroup"
    },
    reload: {
      type: "securityGroups",
      call: function(next) {
        return _reload(this, next);
      }
    },
    create: {
      type: "securityGroup"
    }
  });

  fastener.add("snapshots", {
    find: {
      type: "snapshot"
    },
    reload: {
      type: "snapshots",
      call: function(next) {
        return _reload(this, next);
      }
    }
  });

  fastener.add("spotRequests", {
    find: {
      type: "spotRequest"
    },
    reload: {
      type: "spotRequests",
      call: function(next) {
        return _reload(this, next);
      }
    }
  });

  fastener.add("keyPairs", {
    find: {
      type: "keyPair"
    },
    reload: {
      type: "keyPairs",
      call: function(next) {
        return _reload(this, next);
      }
    },
    create: {
      type: "keyPair"
    }
  });

  fastener.add("region", {
    instances: {
      type: "instances",
      call: function(next) {
        return _load(this.instances, next);
      }
    },
    images: {
      type: "images",
      call: function(next) {
        return _load(this.images, next);
      }
    },
    addresses: {
      type: "addresses",
      call: function(next) {
        return _load(this.addresses, next);
      }
    },
    securityGroups: {
      type: "securityGroups",
      call: function(next) {
        return _load(this.securityGroups, next);
      }
    },
    snapshots: {
      type: "snapshots",
      call: function(next) {
        return _load(this.snapshots, next);
      }
    },
    spotRequests: {
      type: "spotRequests",
      call: function(next) {
        return _load(this.snapshots, next);
      }
    },
    keyPairs: {
      type: "keyPairs",
      call: function(next) {
        return _load(this.keyPairs, next);
      }
    }
  });

  fastener.add("image", {
    createInstance: {
      type: "instance"
    },
    destroy: {
      type: "image"
    },
    tag: {
      type: "image"
    },
    migrate: {
      type: "image"
    }
  });

  fastener.add("instance", {
    start: {
      type: "instance"
    },
    stop: {
      type: "instance"
    },
    restart: {
      type: "instance"
    },
    destroy: {
      type: "instance"
    },
    createImage: {
      type: "image"
    },
    tag: {
      type: "instance"
    }
  });

  fastener.add("keyPair", {
    destroy: {
      type: "keyPair"
    }
  });

  fastener.add("securityGroup", {
    authorizePorts: {
      type: "securityGroup"
    },
    destroy: {
      type: "securityGroup"
    }
  });

  fastener.all({
    pluck: {
      type: "object",
      call: function() {
        var data, key, next, props, _i, _len;

        props = Array.prototype.slice.call(arguments, 0);
        next = props.pop();
        data = {};
        for (_i = 0, _len = props.length; _i < _len; _i++) {
          key = props[_i];
          data[key] = this.get(key);
        }
        return next(null, data);
      }
    }
  });

  module.exports = fastener;

}).call(this);
