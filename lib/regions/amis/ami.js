// Generated by CoffeeScript 1.4.0
(function() {
  var allRegions, gumbo, outcome, stepc,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gumbo = require("gumbo");

  stepc = require("stepc");

  outcome = require("outcome");

  allRegions = require("../../utils/regions");

  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
        Function: 
    
        Parameters:
    */


    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    return _Class;

  })(gumbo.BaseModel);

  ({
    constructor: function(collection, region, item) {
      this.region = region;
      return constructor.__super__.constructor.call(this, collection, item);
    },
    /*
        Function: createServer
      
        creates a new server from the AMI
    
        Parameters:
    */

    createServer: function(options, callback) {
      var newInstanceId, o,
        _this = this;
      ectwo_log.log("%s: create server", this.region.name);
      o = outcome.e(callback);
      newInstanceId = null;
      return stepc(function() {
        return _this._ec2.call("RunInstances", {
          "ImageId": _this.get("imageId"),
          "MinCount": options.count || 1,
          "MaxCount": options.count || 1,
          "InstanceType": options.flavor || "m1.small"
        }, _this, o.s(function(result) {
          newInstanceId = result.instancesSet.item.instanceId;
          return _this.region.servers.load(_this);
        }, o.s(function() {
          return _this.region.servers.findOne({
            instanceId: newInstanceId
          }).exec(_this);
        })));
      });
    },
    /*
    */

    migrate: function(toRegions, callback) {},
    /*
        Function: removes the AMI 
    
        Parameters:
    */

    deRegister: function(callback) {
      ectwo_log.log("%s: degister ami %s", this.region.name, this.get("imageId"));
      return this._ec2.call("DeregisterImage", {
        "ImageId": this.get("imageId")
      }, callback);
    }
  });

}).call(this);
