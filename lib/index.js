// Generated by CoffeeScript 1.4.0
(function() {
  var ECTwo, JoinedRegionCollection, Region, allRegions, async, aws, cstep, gumbo, outcome, _;

  require("./utils/logging");

  aws = require("aws-lib");

  async = require("async");

  Region = require("./region");

  allRegions = require("./utils/regions");

  gumbo = require("gumbo");

  JoinedRegionCollection = require("./joinedRegionCollection");

  cstep = require("cstep");

  outcome = require("outcome");

  _ = require("underscore");

  ECTwo = (function() {
    /*
        Function: Constructor
    
        Parameters:
          options
            key - the EC2 key
            secret - the EC2 private key
          whitelist The whitelist of ec2 regions we want to deploy servers to
    */

    function ECTwo(options, whitelist) {
      var collectionName, _i, _len, _ref;
      this.options = options;
      this.whitelist = whitelist ? whitelist : allRegions;
      this.regions = gumbo.collection([], _.bind(this._createRegionModel, this));
      _ref = ["instances", "images", "keyPairs", "securityGroups", "addresses", "spotRequests", "snapshots"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        collectionName = _ref[_i];
        this[collectionName] = new JoinedRegionCollection(this, collectionName);
      }
      this.regions.synchronizer({
        uniqueKey: "name",
        load: _.bind(this.load, this)
      }).load();
      this._loadRegions();
      this.instances.load();
      this.images.load();
    }

    /*
        Function: 
    
        Parameters:
    */


    ECTwo.prototype.load = cstep(function(callback) {
      var _this = this;
      if (callback == null) {
        callback = (function() {});
      }
      return async.map(this.whitelist, (function(regStr, next) {
        var ec2, host;
        host = "ec2." + regStr + ".amazonaws.com";
        ec2 = aws.createEC2Client(_this.options.key, _this.options.secret, {
          host: host,
          version: "2012-12-01"
        });
        return next(null, {
          name: regStr,
          ec2: ec2
        });
      }), callback);
    });

    /*
    */


    ECTwo.prototype._createRegionModel = function(collection, options) {
      return new Region(collection, options, this);
    };

    /*
    */


    ECTwo.prototype._loadRegions = function(next) {
      return async.forEach(this.regions.findAll().sync(), (function(region, next) {
        return region.load(next);
      }), next);
    };

    return ECTwo;

  })();

  /*
   returns a controller that handles are EC2 regions
  */


  module.exports = function(options, whitelistRegions) {
    return new ECTwo(options, whitelistRegions);
  };

  /*
  */


  module.exports.utils = {
    objectToTags: require("./utils/objectToTags")
  };

  /*
   Expose all regions within ECTwo
  */


  module.exports.regions = allRegions;

  module.exports.utils = require("./utils");

}).call(this);
