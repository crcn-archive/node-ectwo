// Generated by CoffeeScript 1.4.0
(function() {
  var Tag, gumbo, toarray, _;

  gumbo = require("gumbo");

  toarray = require("toarray");

  Tag = require("./tag");

  _ = require("underscore");

  toarray = require("toarray");

  /*
  */


  module.exports = (function() {
    /*
    */

    function _Class(item) {
      this.item = item;
      this._ec2 = item._ec2;
      this._collection = new gumbo.Collection([], _.bind(this._createTag, this));
      this._sync = this._collection.synchronizer({
        uniqueKey: "_id",
        load: _.bind(this._loadTags, this),
        timeout: false
      });
      this._sync.load();
    }

    /*
    */


    _Class.prototype.find = function() {
      return this._collection.find.apply(this._collection, arguments);
    };

    /*
    */


    _Class.prototype.findOne = function() {
      return this._collection.findOne.apply(this._collection, arguments);
    };

    /*
    */


    _Class.prototype.create = function(tags, callback, reload) {
      return this._call(this._prepareQuery(tags), "CreateTags", reload !== false, callback);
    };

    /*
    */


    _Class.prototype.remove = function(tags, callback, reload) {
      return this._call(this._prepareQuery(tags), "DeleteTags", reload !== false, callback);
    };

    /*
    */


    _Class.prototype.update = function(tags, callback) {
      var _this = this;
      return this.remove(tags, (function() {
        return _this.create(tags, callback);
      }), false);
    };

    /*
    */


    _Class.prototype._call = function(data, command, reload, callback) {
      var self;
      self = this;
      return this._ec2.call(command, data, function(err, result) {
        var onReload,
          _this = this;
        console.log(result);
        onReload = function() {
          return self._sync.load(function() {
            return callback.apply(_this, arguments);
          });
        };
        if (!reload) {
          return onReload;
        }
        return self._ec2.call("DescribeInstances", {
          "InstanceId.1": self.item.get("_id")
        }, function(err, result) {
          console.log(JSON.stringify(result.reservationSet.item, null, 2));
          return self.item.reload(onReload);
        });
      });
    };

    /*
    */


    _Class.prototype._prepareQuery = function(tags) {
      var i, tag, toUpdate, _i, _len;
      tags = toarray(tags);
      toUpdate = {
        "ResourceId.1": this.item.get("_id")
      };
      for (i = _i = 0, _len = tags.length; _i < _len; i = ++_i) {
        tag = tags[i];
        toUpdate["Tag." + i + ".Key"] = tag.key;
        toUpdate["Tag." + i + ".Value"] = tag.value;
      }
      return toUpdate;
    };

    /*
    */


    _Class.prototype._createTag = function(collection, item) {
      return new Tag(collection, item, this);
    };

    /*
    */


    _Class.prototype._loadTags = function(options, onLoad) {
      var tags;
      tags = this.item.get("tags");
      return onLoad(null, tags);
    };

    return _Class;

  })();

  /*
  */


  module.exports.transformTags = function(rawData) {
    return toarray(rawData.tagSet).map(function(tagSet) {
      var tag;
      tag = tagSet.item;
      return {
        _id: "" + tag.key + "-" + tag.value,
        key: tag.key,
        value: tag.value
      };
    });
  };

}).call(this);
