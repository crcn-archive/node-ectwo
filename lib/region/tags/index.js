// Generated by CoffeeScript 1.6.2
(function() {
  var Tag, gumbo, outcome, tagsToObject, toarray, waitForCollectionSync, _;

  _ = require("underscore");

  Tag = require("./tag");

  gumbo = require("gumbo");

  toarray = require("toarray");

  tagsToObject = require("../../utils/tagsToObject");

  waitForCollectionSync = require("../../utils/waitForCollectionSync");

  outcome = require("outcome");

  /*
  */


  module.exports = (function() {
    /*
    */
    function _Class(item) {
      this.item = item;
      this._ec2 = item._ec2;
      this.region = item.region;
      this._collection = new gumbo.Collection([], _.bind(this._createTag, this));
      this.logger = this._collection.logger = this.item.logger.child("tags");
      this._sync = this._collection.loader({
        uniqueKey: "_id",
        load: _.bind(this._loadTags, this),
        timeout: false
      });
      this._sync.load();
    }

    /*
    */


    _Class.prototype.find = function() {
      return this._collection.find.apply(this._collection, arguments);
    };

    /*
    */


    _Class.prototype.findOne = function() {
      return this._collection.findOne.apply(this._collection, arguments);
    };

    /*
    */


    _Class.prototype.create = function(tags, callback, reload) {
      var _this = this;

      this.logger.info("create", tags);
      return this._call(tags, "CreateTags", reload !== false, function() {
        _this.logger.info("created", tags);
        return callback.apply(_this, arguments);
      });
    };

    /*
    */


    _Class.prototype.toObject = function() {
      return tagsToObject(this.item.get("tags"));
    };

    /*
    */


    _Class.prototype.getKeyValue = function(key) {
      return this.toObject()[key];
    };

    /*
    */


    _Class.prototype.remove = function(tags, callback, reload) {
      return this._call(tags, "DeleteTags", reload !== false, callback);
    };

    /*
    */


    _Class.prototype.update = function(oldTags, newTags, callback) {
      var _this = this;

      return this.remove(oldTags, (function() {
        return _this.create(newTags, callback, true);
      }), false);
    };

    /*
    */


    _Class.prototype._call = function(tags, command, reload, callback) {
      var data, load, neg, search, self, tagIds,
        _this = this;

      self = this;
      tags = toarray(tags);
      data = this._prepareQuery(tags);
      tagIds = tags.map(function(tag) {
        return "" + tag.key + "-" + tag.value;
      });
      search = {};
      search._id = {
        $in: tagIds
      };
      neg = !/DeleteTags/.test(command);
      load = function(callback) {
        return _this._ec2.call(command, JSON.parse(JSON.stringify(data)), outcome.e(function(err) {
          console.error(err);
          return callback(err);
        }).s(function(result) {
          if (!reload) {
            return callback();
          }
          return _this._reload(callback);
        }));
      };
      if (!reload) {
        return load(callback);
      }
      return waitForCollectionSync(search, self._collection, neg, load, callback);
    };

    /*
    */


    _Class.prototype._reload = function(callback) {
      var _this = this;

      return this.item.reload(outcome.e(callback).s(function() {
        return _this._sync.load(callback);
      }));
    };

    /*
    */


    _Class.prototype._prepareQuery = function(tags) {
      var i, tag, toUpdate, _i, _len;

      toUpdate = {
        "ResourceId.1": this.item.get("_id")
      };
      for (i = _i = 0, _len = tags.length; _i < _len; i = ++_i) {
        tag = tags[i];
        toUpdate["Tag." + (i + 1) + ".Key"] = tag.key;
        toUpdate["Tag." + (i + 1) + ".Value"] = tag.value;
      }
      return toUpdate;
    };

    /*
    */


    _Class.prototype._createTag = function(collection, item) {
      return new Tag(collection, item, this);
    };

    /*
    */


    _Class.prototype._loadTags = function(options, callback) {
      return callback(null, this.item.get("tags"));
    };

    return _Class;

  })();

  /*
  */


  module.exports.transformTags = function(rawData) {
    var _ref;

    return toarray((_ref = rawData.tagSet) != null ? _ref.item : void 0).map(function(tag) {
      return {
        _id: "" + tag.key + "-" + tag.value,
        key: tag.key,
        value: tag.value
      };
    });
  };

}).call(this);
