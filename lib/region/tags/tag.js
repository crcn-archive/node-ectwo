// Generated by CoffeeScript 1.6.2
(function() {
  var BaseModel, gumbo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gumbo = require("gumbo");

  BaseModel = require("../base/model");

  module.exports = (function(_super) {
    __extends(_Class, _super);

    /*
    */


    function _Class(collection, item, tags) {
      this.tags = tags;
      _Class.__super__.constructor.call(this, collection, this.tags.region, item);
    }

    /*
    */


    _Class.prototype.setValue = function(value, callback) {
      this.update({
        $set: {
          value: value
        }
      });
      return this.tags.update({
        key: this.get("key"),
        value: this.get("value")
      }, callback);
    };

    /*
    */


    _Class.prototype._destroy = function(callback) {
      return this.tags._remove({
        key: this.get("key")
      }, callback);
    };

    /*
    */


    /*
    _resetTags: (property, value, callback) ->
      oldTags = @_ctags()
      update = {}
      update[property] = value
      @update({ $set: update })
      newTags  = @_ctags()
      @tags.update { key: @get("key") }, newTags, callback
    */


    return _Class;

  })(BaseModel);

}).call(this);
