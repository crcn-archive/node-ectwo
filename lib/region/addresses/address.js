// Generated by CoffeeScript 1.4.0
(function() {
  var BaseModel, findOneOrErr, waitForCollectionSync,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require("../base/model");

  waitForCollectionSync = require("../../utils/waitForCollectionSync");

  findOneOrErr = require("../../utils/findOneOrErr");

  module.exports = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    /*
    */


    _Class.prototype._destroy = function(callback) {
      return this._ec2.call("ReleaseAddress", {
        PublicIp: this.get("publicIp")
      }, callback);
    };

    /*
    */


    _Class.prototype.disassociate = function(callback) {
      var load,
        _this = this;
      load = function(callback) {
        return _this._ec2.call("DisassociateAddress", {
          PublicIp: _this.get("publicIp")
        }, outcome.e(callback).s(function(result) {
          return _this.reload(callback);
        }));
      };
      return waitForCollectionSync({
        publicIp: this.get("publicIp"),
        instanceId: this.get("instanceId")
      }, this.collection, false, load, callback);
    };

    /*
    */


    _Class.prototype.getInstance = function(callback) {
      return findOneOrErr(this.region.instances, {
        _id: this.get("instanceId")
      }, callback);
    };

    /*
    */


    _Class.prototype.associate = function(instanceOrInstanceId, callback) {
      var instanceId, load,
        _this = this;
      instanceId = typeof instanceOrInstanceId === "object" ? instanceOrInstanceId.get("_id") : instanceOrInstanceId;
      load = function(callback) {
        return _this._ec2.call("AssociateAddress", {
          PublicIp: _this.get("publicIp"),
          InstanceId: instanceId
        }, function() {
          return _this.reload(callback);
        });
      };
      return waitForCollectionSync({
        publicIp: this.get("publicIp"),
        instanceId: instanceId
      }, this.collection, true, load, callback);
    };

    return _Class;

  })(BaseModel);

}).call(this);
