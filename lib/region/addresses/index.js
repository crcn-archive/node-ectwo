// Generated by CoffeeScript 1.4.0
(function() {
  var AddressModel, BaseCollection, outcome, toarray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseCollection = require("../base/collection");

  AddressModel = require("./address");

  outcome = require("outcome");

  toarray = require("toarray");

  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(region) {
      _Class.__super__.constructor.call(this, region, {
        modelClass: AddressModel
      });
    }

    /*
    */


    _Class.prototype.allocate = function(callback) {
      var _this = this;
      return this.ec2.call("AllocateAddress", {}, outcome.e(callback).s(function(result) {
        return _this.syncAndFindOne({
          publicIp: result.publicIp
        }, callback);
      }));
    };

    /*
    */


    _Class.prototype._load = function(options, callback) {
      var search;
      search = {};
      if (options._id) {
        search["AllocationId.1"] = options._id;
      }
      return this.ec2.call("DescribeAddresses", search, outcome.e(callback).s(function(result) {
        var addresses;
        addresses = toarray(result.addressesSet.item).map((function(item) {
          var instanceId;
          if (typeof item.instanceId === "object") {
            instanceId = void 0;
          } else {
            instanceId = item.instanceId;
          }
          return {
            _id: item.publicIp,
            publicIp: item.publicIp,
            domain: item.domain,
            instanceId: instanceId
          };
        }));
        return callback(null, addresses);
      }));
    };

    return _Class;

  })(BaseCollection);

}).call(this);
