// Generated by CoffeeScript 1.4.0
(function() {
  var BaseCollection, SnapShot, parseCreateImageDescription, parseDescription, toarray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  toarray = require("toarray");

  SnapShot = require("./snapshot");

  BaseCollection = require("../base/collection");

  /*
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(region) {
      _Class.__super__.constructor.call(this, region, {
        modelClass: SnapShot,
        timeout: 1000 * 60 * 60,
        name: "snapshot"
      });
      this.logger = this.region.logger.child("snapshot");
    }

    /*
       Copies a snapshot from a particular region. This is a PULL.
    */


    _Class.prototype.copy = function(options, callback) {
      var _this = this;
      this.logger.info("copy", options);
      return this.ec2.call("CopySnapshot", {
        "SourceRegion": options.region,
        "SourceSnapshotId": options._id,
        "Description": options.description
      }, this._o.e(callback).s(function(result) {
        return _this.syncAndFindOne({
          _id: result.snapshotId
        }, callback);
      }));
    };

    /*
    */


    _Class.prototype._load = function(options, onLoad) {
      var search,
        _this = this;
      search = {
        "Owner.1": "self"
      };
      if (options._id) {
        search["SnapshotId.1"] = options._id;
      }
      return this.ec2.call("DescribeSnapshots", search, this._o.e(onLoad).s(function(result) {
        var snapshots;
        snapshots = toarray(result.snapshotSet.item).map(function(item) {
          var volInfo;
          volInfo = parseDescription(item);
          return {
            _id: item.snapshotId,
            volumneId: item.volumeId,
            status: item.status,
            startedAt: new Date(item.startTime),
            progress: Number(item.progress.substr(0, item.progress.length - 1)),
            ownerId: item.ownerId,
            volumeSize: item.volumeSize,
            description: typeof item.description === "object" ? "" : item.description,
            instanceId: volInfo.instanceId,
            volumeId: volInfo.volumeId,
            imageId: volInfo.imageId,
            image: volInfo.image
          };
        });
        return onLoad(null, snapshots);
      }));
    };

    return _Class;

  })(BaseCollection);

  parseDescription = function(item) {
    var desc;
    desc = String(item.description);
    try {
      return JSON.parse(desc);
    } catch (e) {

    }
    if (~desc.indexOf("CreateImage")) {
      return parseCreateImageDescription(desc);
    }
    return {};
  };

  /*
   Jesus this is fugly, but EC2 unfortunately doesn't offer the ability to find the associated volumes / instances / ami's
   with each spot
  */


  parseCreateImageDescription = function(desc) {
    var match;
    match = desc.match(/CreateImage\((.+?)\) for (.+?) from (.*)/);
    if (!match) {
      return {};
    }
    return {
      instanceId: match[1],
      imageId: match[2],
      volumeId: match[3]
    };
  };

}).call(this);
