// Generated by CoffeeScript 1.6.2
(function() {
  var Snapshot, Snapshots, outcome, parseCreateImageDescription, parseDescription, toarray, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  outcome = require("outcome");

  Snapshot = require("./snapshot");

  toarray = require("toarray");

  utils = require("../../utils");

  Snapshots = (function(_super) {
    __extends(Snapshots, _super);

    /*
    */


    function Snapshots(region) {
      Snapshots.__super__.constructor.call(this, {
        modelClass: Snapshot,
        region: region
      });
    }

    /*
    */


    Snapshots.prototype.create = function(volumeId, description, next) {
      var o,
        _this = this;

      if (arguments.length === 2) {
        next = description;
        description = void 0;
      }
      o = outcome.e(next);
      return this.api.call("CreateSnapshot", utils.cleanObj({
        VolumeId: volumeId,
        Description: description
      }), o.s(function(result) {
        return _this.waitForOne({
          _id: result.snapshotId
        }, next);
      }));
    };

    /*
    */


    Snapshots.prototype._load2 = function(options, next) {
      var o, search,
        _this = this;

      search = {
        "Owner.1": "self"
      };
      if (options._id) {
        search["SnapshotId.1"] = options._id;
      }
      o = outcome.e(next);
      return this.api.call("DescribeSnapshots", search, o.s(function(result) {
        var snapshots;

        snapshots = toarray(result.snapshotSet.item).map(function(item) {
          var volInfo;

          volInfo = parseDescription(item);
          return {
            _id: item.snapshotId,
            volumneId: item.volumeId,
            status: item.status,
            startedAt: new Date(item.startTime),
            progress: Number(item.progress.substr(0, item.progress.length - 1)),
            ownerId: item.ownerId,
            volumeSize: item.volumeSize,
            description: typeof item.description === "object" ? "" : item.description,
            instanceId: volInfo.instanceId,
            volumeId: volInfo.volumeId,
            imageId: volInfo.imageId,
            image: volInfo.image
          };
        });
        return next(null, snapshots);
      }));
    };

    return Snapshots;

  })(require("../../base/collection"));

  parseDescription = function(item) {
    var desc, e;

    desc = String(item.description);
    try {
      return JSON.parse(desc);
    } catch (_error) {
      e = _error;
    }
    if (~desc.indexOf("CreateImage")) {
      return parseCreateImageDescription(desc);
    }
    return {};
  };

  /*
   Jesus this is fugly, but EC2 unfortunately doesn't offer the ability to find the associated volumes / instances / ami's
   with each spot
  */


  parseCreateImageDescription = function(desc) {
    var match;

    match = desc.match(/CreateImage\((.+?)\) for (.+?) from (.*)/);
    if (!match) {
      return {};
    }
    return {
      instanceId: match[1],
      imageId: match[2],
      volumeId: match[3]
    };
  };

  module.exports = Snapshots;

}).call(this);
