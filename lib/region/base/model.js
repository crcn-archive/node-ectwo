// Generated by CoffeeScript 1.4.0
(function() {
  var gumbo, waitUntilItemSync,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gumbo = require("gumbo");

  waitUntilItemSync = require("../../utils/waitUntilItemSync");

  /*
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
        Function: 
    
        Parameters:
    */


    function _Class(collection, region, item) {
      this.region = region;
      this._ec2 = region.ec2;
      _Class.__super__.constructor.call(this, collection, item);
      this._o = outcome.e(this);
      this.logger = collection.logger.child("" + item._id);
    }

    /*
    */


    _Class.prototype.reload = function(callback) {
      if (callback == null) {
        callback = (function() {});
      }
      return this._sync(callback);
    };

    /*
        Function: 
    
        Parameters:
    */


    _Class.prototype._sync = function(callback) {
      return this.collection.loader().loadOne(this.get("_id"), callback);
    };

    /*
    */


    _Class.prototype.destroy = function(callback) {
      var _this = this;
      this.logger.info("destroy");
      return this._destroy(this._o.e(callback).s(function() {
        _this.logger.info("destroyed");
        _this._remove();
        return callback();
      }));
    };

    /*
    */


    _Class.prototype.waitUntilSync = function(search, callback) {
      return waitUntilItemSync(this, search, callback);
    };

    /*
    */


    _Class.prototype._skipIfSynced = function(search, end, callback) {
      return waitUntilItemSync.skipIfSynced(this, search, end, callback);
    };

    /*
    */


    _Class.prototype._remove = function() {
      return this.collection.remove({
        _id: this.get("_id")
      }, (function() {}));
    };

    return _Class;

  })(gumbo.BaseModel);

}).call(this);
