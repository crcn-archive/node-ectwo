// Generated by CoffeeScript 1.6.2
(function() {
  var Volume, Volumes, outcome, toarray, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Volume = require("./volume");

  outcome = require("outcome");

  toarray = require("toarray");

  utils = require("../../utils");

  Volumes = (function(_super) {
    __extends(Volumes, _super);

    /*
    */


    function Volumes(region) {
      Volumes.__super__.constructor.call(this, {
        modelClass: Volume,
        region: region
      });
    }

    /*
    */


    Volumes.prototype.create = function(options, next) {
      var o, ops,
        _this = this;

      ops = utils.cleanObj({
        Size: options.size,
        SnapshotId: options.snapshotId,
        AvailabilityZone: options.zone,
        VolumeType: options.type,
        Iops: options.iops
      });
      o = outcome.e(next);
      return this.api.call("CreateVolume", ops, o.s(function(result) {
        return _this.waitForOne({
          _id: result.volumeId
        }, o.s(function(volume) {
          return volume.wait({
            status: "available"
          }, next);
        }));
      }));
    };

    /*
    */


    Volumes.prototype._load2 = function(options, next) {
      var o, search,
        _this = this;

      search = {};
      o = outcome.e(next);
      if (options._id) {
        search["VolumeId.1"] = options._id;
      }
      return this.api.call("DescribeVolumes", search, o.s(function(result) {
        var volumes;

        volumes = toarray(result.volumeSet.item);
        volumes = volumes.map(function(volume) {
          return {
            _id: volume.volumeId,
            size: volume.size,
            snapshotId: volume.snapshotId,
            availabilityZone: volume.availabilityZone,
            status: volume.status,
            createTime: volume.createTime,
            type: volume.volumeType,
            attachments: toarray(volume.attachmentSet.item).map(function(item) {
              return {
                instanceId: item.instanceId,
                device: item.device,
                status: item.status,
                deleteOnTermination: item.deleteOnTermination
              };
            })
          };
        });
        return next(null, volumes.filter(function(volume) {
          return volume.status !== "deleting";
        }));
      }));
    };

    return Volumes;

  })(require("../../base/collection"));

  module.exports = Volumes;

}).call(this);
