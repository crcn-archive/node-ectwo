// Generated by CoffeeScript 1.6.2
(function() {
  var Volume, outcome, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  outcome = require("outcome");

  Volume = (function(_super) {
    __extends(Volume, _super);

    function Volume() {
      _ref = Volume.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    */


    Volume.prototype.attach = function(instanceId, device, next) {
      var _this = this;

      if (arguments.length === 2) {
        next = device;
        device = "/dev/sdh";
      }
      return this.api.call("AttachVolume", {
        VolumeId: this.get("_id"),
        InstanceId: instanceId,
        Device: device
      }, outcome.e(next).s(function() {
        return _this.region.instances.reload(function() {
          return _this.reload(next);
        });
      }));
    };

    /*
    */


    Volume.prototype.createSnapshot = function(description, next) {
      if (arguments.length === 1) {
        next = description;
        description = void 0;
      }
      return this.region.snapshots.create(this.get("_id"), description, next);
    };

    /*
    */


    Volume.prototype.detach = function(next) {
      var _this = this;

      return this.api.call("DetachVolume", {
        VolumeId: this.get("_id")
      }, outcome.e(next).s(function() {
        return _this.region.instances.reload(function() {
          return _this.reload(next);
        });
      }));
    };

    /*
    */


    Volume.prototype._destroy = function(next) {
      return this.api.call("DeleteVolume", {
        VolumeId: this.get("_id")
      }, next);
    };

    return Volume;

  })(require("../../base/regionModel"));

  module.exports = Volume;

}).call(this);
