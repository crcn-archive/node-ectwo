// Generated by CoffeeScript 1.6.2
(function() {
  var KeyPair, KeyPairs, outcome, toarray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  KeyPair = require("./keyPair");

  toarray = require("toarray");

  outcome = require("outcome");

  KeyPairs = (function(_super) {
    __extends(KeyPairs, _super);

    /*
    */


    function KeyPairs(region) {
      this.region = region;
      KeyPairs.__super__.constructor.call(this, {
        modelClass: KeyPair
      });
    }

    /*
    */


    KeyPairs.prototype._load2 = function(options, next) {
      var search,
        _this = this;

      search = {};
      if (options._id) {
        search["KeyName.1"] = options._id;
      }
      return this.region.api.call("DescribeKeyPairs", search, outcome.e(next).s(function(result) {
        var keySets;

        keySets = toarray(result.keySet.item).map(function(keySet) {
          return {
            _id: keySet.keyName,
            name: keySet.keyName,
            region: _this.region.get("name"),
            fingerprint: keySet.keyFingerprint
          };
        });
        return next(null, keySets);
      }));
    };

    /*
    */


    KeyPairs.prototype.create = function(optionsOrName, next) {
      var onKey, options,
        _this = this;

      if (typeof optionsOrName === "string") {
        options = {
          name: optionsOrName
        };
      } else {
        options = optionsOrName;
      }
      onKey = outcome.e(next).s(function(result) {
        return _this.waitForOne({
          name: options.name
        }, outcome.e(next).s(function(keyPair) {
          keyPair.set("material", result.keyMaterial);
          return next(null, keyPair);
        }));
      });
      if (options.material) {
        return this.region.api.call("ImportKeyPair", {
          KeyName: options.name,
          PublicKeyMaterial: options.material
        }, onKey);
      } else {
        return this.region.api.call("CreateKeyPair", {
          KeyName: options.name
        }, onKey);
      }
    };

    return KeyPairs;

  })(require("../../base/collection"));

  module.exports = KeyPairs;

}).call(this);
