// Generated by CoffeeScript 1.4.0
(function() {
  var BaseCollection, SecurityGroup, outcome, toarray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseCollection = require("../base/collection");

  SecurityGroup = require("./securityGroup");

  outcome = require("outcome");

  toarray = require("toarray");

  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(region) {
      _Class.__super__.constructor.call(this, region, {
        modelClass: SecurityGroup
      });
    }

    /*
    */


    _Class.prototype.create = function(optionsOrName, callback) {
      var options,
        _this = this;
      if (typeof optionsOrName === "string") {
        options = {
          name: optionsOrName
        };
      }
      if (!options.description) {
        options.description = "Security group created by node-ectwo lib";
      }
      return this.ec2.call("CreateSecurityGroup", {
        GroupName: options.name,
        GroupDescription: options.description
      }, outcome.e(callback).s(function(result) {
        return _this.syncAndFindOne({
          groupName: options.name
        }, callback);
      }));
    };

    /*
    */


    _Class.prototype._load = function(options, onLoad) {
      var search;
      search = {};
      if (options._id) {
        search["GroupId.1"] = options._id;
      }
      return this.ec2.call("DescribeSecurityGroups", search, outcome.e(onLoad).s(function(result) {
        var items;
        items = toarray(result.securityGroupInfo.item).map(function(sg) {
          return {
            _id: sg.groupId,
            ownerId: sg.ownerId,
            name: sg.groupName,
            description: sg.groupDescription,
            permissions: sg.ipPermissions
          };
        });
        console.log(items);
        return onLoad(null, items);
      }));
    };

    return _Class;

  })(BaseCollection);

}).call(this);
