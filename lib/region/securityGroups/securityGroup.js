// Generated by CoffeeScript 1.6.2
(function() {
  var SecurityGroup, outcome, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  outcome = require("outcome");

  SecurityGroup = (function(_super) {
    __extends(SecurityGroup, _super);

    function SecurityGroup() {
      _ref = SecurityGroup.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
      {
        ports: [
          {
            from: 80,
            to: 8080,
            type: "tcp",
            ranges: ["0.0.0.0/0"]
          }
        ]
      }
    */


    SecurityGroup.prototype.authorizePorts = function(optionsOrPort, next) {
      var i, j, n, options, portInfo, query, range, _i, _j, _len, _len1, _ref1, _ref2,
        _this = this;

      if (typeof optionsOrPort === "number") {
        options = {
          ports: [
            {
              from: optionsOrPort,
              to: optionsOrPort
            }
          ]
        };
      } else {
        options = optionsOrPort;
      }
      query = {
        GroupId: this.get("_id")
      };
      _ref1 = options.ports;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        portInfo = _ref1[i];
        n = i + 1;
        if (!portInfo.ranges) {
          portInfo.ranges = ["0.0.0.0/0"];
        }
        query["IpPermissions." + n + ".IpProtocol"] = portInfo.protocol || "tcp";
        query["IpPermissions." + n + ".FromPort"] = portInfo.from || portInfo.number;
        query["IpPermissions." + n + ".ToPort"] = portInfo.to || portInfo.number;
        _ref2 = portInfo.ranges;
        for (j = _j = 0, _len1 = _ref2.length; _j < _len1; j = ++_j) {
          range = _ref2[j];
          query["IpPermissions." + n + ".IpRanges." + (j + 1) + ".CidrIp"] = range;
        }
      }
      return this.api.call("AuthorizeSecurityGroupIngress", query, outcome.e(next).s(function(result) {
        return _this.reload(next);
      }));
    };

    /*
    */


    SecurityGroup.prototype._destroy = function(next) {
      return this.api.call("DeleteSecurityGroup", {
        GroupName: this.get("name")
      }, next);
    };

    return SecurityGroup;

  })(require("../../base/regionModel"));

  module.exports = SecurityGroup;

}).call(this);
