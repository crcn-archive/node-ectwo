// Generated by CoffeeScript 1.4.0
(function() {
  var BaseCollection, Pricing, SpotRequest, async, toarray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require("async");

  toarray = require("toarray");

  Pricing = require("./pricing");

  SpotRequest = require("./spotRequest");

  BaseCollection = require("../base/collection");

  /*
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(region) {
      this.pricing = new Pricing(region);
      this.pricing.load();
      _Class.__super__.constructor.call(this, region, {
        modelClass: SpotRequest,
        name: "spotRequest"
      });
    }

    _Class.prototype.create = function(options, callback) {
      var realOps,
        _this = this;
      realOps = {
        "SpotPrice": options.price,
        "Type": "one-time",
        "LaunchSpecification.ImageId": options.imageId,
        "LaunchSpecification.InstanceType": options.type
      };
      return this.ec2.call("RequestSpotInstances", realOps, this._o.e(callback).s(function(result) {
        return _this.syncAndFindOne({
          _id: result.spotInstanceRequestSet.item.spotInstanceRequestId
        }, callback);
      }));
    };

    /*
    */


    _Class.prototype._load = function(options, onLoad) {
      var search;
      search = {};
      if (options._id) {
        search["SpotInstanceRequestId.1"] = options._id;
      }
      return this.ec2.call("DescribeSpotInstanceRequests", search, this._o.e(onLoad).s(function(result) {
        var requests;
        requests = toarray(result.spotInstanceRequestSet.item).map(function(item) {
          return {
            _id: item.spotInstanceRequestId,
            price: Number(item.spotPrice),
            type: item.type,
            state: item.state,
            instance: {
              imageId: item.launchSpecification.imageId,
              type: item.launchSpecification.instanceType
            },
            createdAt: new Date(item.createTime),
            description: item.productDescription
          };
        });
        if (!options._id) {
          requests = requests.filter(function(request) {
            return request.state !== "cancelled";
          });
        }
        return onLoad(null, requests);
      }));
    };

    return _Class;

  })(BaseCollection);

}).call(this);
