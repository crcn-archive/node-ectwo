// Generated by CoffeeScript 1.4.0
(function() {
  var Addresses, Images, Instances, KeyPairs, SecurityGroups, SnapShots, SpotRequests, async, cstep, gumbo, logger, winston, _s,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _s = require("underscore.string");

  gumbo = require("gumbo");

  cstep = require("cstep");

  async = require("async");

  Images = require("./images");

  logger = require("../utils/logger");

  winston = require("winston");

  KeyPairs = require("./keyPairs");

  Instances = require("./instances");

  Addresses = require("./addresses");

  SnapShots = require("./snapshots");

  SpotRequests = require("./spotRequests");

  SecurityGroups = require("./securityGroups");

  /*
  Amazon doesn't have a single API to access to all regions, so we have to provide
  a business delegate with a specific endpoint to the region we want to connect to. With EC2, all of them.
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(collection, options, all) {
      this.collection = collection;
      this.options = options;
      this.all = all;
      _Class.__super__.constructor.call(this, collection, {
        name: options.name
      });
      this.ec2 = options.ec2;
      this.logger = logger.child("" + (_s.pad(options.name, 14, ' ', 'right')));
      this._loadables = [this.images = new Images(this), this.keyPairs = new KeyPairs(this), this.instances = new Instances(this), this.addresses = new Addresses(this), this.spotRequests = new SpotRequests(this), this.securityGroups = new SecurityGroups(this), this.snapshots = new SnapShots(this)];
    }

    /*
    */


    _Class.prototype.load = cstep(function(callback) {
      var _this = this;
      this.logger.info("loading");
      async.forEach(this._loadables, (function(loadable, next) {
        return loadable.load(next);
      }), callback);
      return this;
    });

    return _Class;

  })(gumbo.BaseModel);

}).call(this);
