// Generated by CoffeeScript 1.6.2
(function() {
  var Instance, Instances, convertTags, flatten, outcome, stepc, toarray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  outcome = require("outcome");

  toarray = require("toarray");

  flatten = require("flatten");

  Instance = require("./instance");

  convertTags = require("../../utils/convertTags");

  stepc = require("stepc");

  Instances = (function(_super) {
    __extends(Instances, _super);

    /*
    */


    function Instances(region) {
      Instances.__super__.constructor.call(this, {
        modelClass: Instance,
        region: region
      });
    }

    /*
    */


    Instances.prototype.create = function(options, next) {
      var newInstanceId, o, self;

      o = outcome.e(next);
      newInstanceId = null;
      self = this;
      return stepc.async(function() {
        return self.region.api.call("RunInstances", {
          ImageId: options.imageId,
          MinCount: options.count || 1,
          MaxCount: options.count || 1,
          KeyName: options.keyName,
          InstanceType: options.flavor || options.type || "t1.micro"
        }, this);
      }, o.s(function(result) {
        newInstanceId = result.instancesSet.item.instanceId;
        return self.wait({
          _id: newInstanceId
        }, this);
      }), o.s(function(instances) {
        var instance;

        instance = instances[0];
        return instance.wait({
          state: "running"
        }, function() {
          if (options.tags) {
            return instance.tag(options.tags, next);
          }
          return next(null, instance);
        });
      }), next);
    };

    /*
    */


    Instances.prototype._load2 = function(options, next) {
      var search;

      search = {};
      if (options._id) {
        search["InstanceId.1"] = options._id;
      }
      return this.region.api.call("DescribeInstances", search, outcome.e(next).s(function(result) {
        var instances;

        instances = toarray(result.reservationSet.item);
        instances = flatten(instances.map(function(instance) {
          return instance.instancesSet.item;
        })).map(function(instance) {
          return {
            _id: instance.instanceId,
            imageId: instance.imageId,
            state: instance.instanceState.name,
            dnsName: instance.dnsName,
            type: instance.instanceType,
            launchTime: new Date(instance.launchTime),
            architecture: instance.architecture,
            tags: convertTags(instance)
          };
        });
        if (!options._id) {
          instances = instances.filter(function(instance) {
            return instance.state !== "terminated";
          });
        }
        return next(null, instances);
      }));
    };

    return Instances;

  })(require("../../base/collection"));

  module.exports = Instances;

}).call(this);
