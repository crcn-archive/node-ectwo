// Generated by CoffeeScript 1.6.2
(function() {
  var Instance, Instances, async, convertTags, flatten, outcome, stepc, toarray, type, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  outcome = require("outcome");

  toarray = require("toarray");

  flatten = require("flatten");

  Instance = require("./instance");

  type = require("type-component");

  convertTags = require("../../utils/convertTags");

  stepc = require("stepc");

  utils = require("../../utils");

  async = require("async");

  Instances = (function(_super) {
    __extends(Instances, _super);

    /*
    */


    function Instances(region) {
      Instances.__super__.constructor.call(this, {
        modelClass: Instance,
        region: region
      });
    }

    /*
    */


    Instances.prototype.create = function(options, next) {
      var newInstanceId, o, self;

      if (type(options) === "number") {
        options = {
          count: options
        };
      }
      o = outcome.e(next);
      newInstanceId = null;
      self = this;
      return stepc.async(function() {
        var ops;

        if (options.volumeSize && !options.deviceName) {
          options.deviceName = "/dev/sda1";
        }
        ops = utils.cleanObj({
          ImageId: options.imageId,
          MinCount: options.count || 1,
          MaxCount: options.count || 1,
          KeyName: options.keyName,
          "SecurityGroupId.1": options.securityGroupId,
          "BlockDeviceMapping.1.DeviceName": options.deviceName,
          "BlockDeviceMapping.1.Ebs.VolumeSize": options.volumeSize,
          "BlockDeviceMapping.1.Ebs.VolumeType": options.volumeType,
          InstanceType: options.flavor || options.type || "t1.micro"
        });
        return self.region.api.call("RunInstances", ops, this);
      }, o.s(function(result) {
        var newInstanceIds,
          _this = this;

        newInstanceIds = toarray(result.instancesSet.item).map(function(item) {
          return item.instanceId;
        });
        return async.each(newInstanceIds, (function(instanceId, next) {
          return self.wait({
            _id: String(instanceId)
          }, next);
        }), o.s(function() {
          return self.find({
            _id: {
              $in: newInstanceIds
            }
          }, _this);
        }));
      }), o.s(function(instances) {
        var _this = this;

        return async.each(instances, (function(instance, next) {
          return instance.wait({
            state: "running"
          }, function() {
            if (options.tags) {
              return instance.tag(options.tags, next);
            }
            return next(null, instance);
          });
        }), o.s(function() {
          if (instances.length === 1) {
            return _this(null, instances[0]);
          }
          return _this(null, instances);
        }));
      }), next);
    };

    /*
    */


    Instances.prototype._load2 = function(options, next) {
      var search,
        _this = this;

      search = {};
      if (options._id) {
        search["InstanceId.1"] = options._id;
      }
      return this.region.api.call("DescribeInstances", search, outcome.e(next).s(function(result) {
        var instances;

        instances = toarray(result.reservationSet.item);
        instances = flatten(instances.map(function(instance) {
          return instance.instancesSet.item;
        })).map(function(instance) {
          return {
            _id: instance.instanceId,
            imageId: instance.imageId,
            state: instance.instanceState.name,
            dnsName: instance.dnsName,
            type: instance.instanceType,
            region: _this.region.get("name"),
            launchTime: new Date(instance.launchTime),
            architecture: instance.architecture,
            keyName: instance.keyName,
            address: instance.ipAddress,
            securityGroups: toarray(instance.groupSet.item).map(function(item) {
              return {
                _id: item.groupId,
                name: item.groupName
              };
            }),
            tags: convertTags(instance)
          };
        });
        if (!options._id) {
          instances = instances.filter(function(instance) {
            return instance.state !== "terminated";
          });
        }
        return next(null, instances);
      }));
    };

    return Instances;

  })(require("../../base/collection"));

  module.exports = Instances;

}).call(this);
