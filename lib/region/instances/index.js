// Generated by CoffeeScript 1.6.2
(function() {
  var BaseCollection, InstanceModel, Tags, comerr, findTags, flatten, gumbo, stepc, toarray, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  Tags = require("../tags");

  gumbo = require("gumbo");

  stepc = require("stepc");

  comerr = require("comerr");

  flatten = require("flatten");

  toarray = require("toarray");

  findTags = require("../../utils/findTags");

  InstanceModel = require("./instance");

  BaseCollection = require("../base/collection");

  /*
  */


  module.exports = (function(_super) {
    __extends(_Class, _super);

    /*
    */


    function _Class(region) {
      _Class.__super__.constructor.call(this, region, {
        modelClass: InstanceModel,
        name: "instance"
      });
    }

    /*
    */


    _Class.prototype._load = function(options, onLoad) {
      var itags, search, self;

      self = this;
      itags = null;
      search = {};
      if (options._id) {
        search["InstanceId.1"] = options._id;
      }
      return self.ec2.call("DescribeInstances", search, this._o.e(onLoad).s(function(result) {
        var instances, serversById;

        serversById = {};
        instances = toarray(result.reservationSet.item);
        instances = flatten(instances.map(function(instance) {
          return instance.instancesSet.item;
        })).map(function(instance) {
          return {
            _id: instance.instanceId,
            imageId: instance.imageId,
            state: instance.instanceState.name,
            dnsName: instance.dnsName,
            type: instance.instanceType,
            launchTime: new Date(instance.launchTime),
            architecture: instance.architecture,
            tags: Tags.transformTags(instance)
          };
        });
        if (!options._id) {
          instances = instances.filter(function(instance) {
            return instance.state !== "terminated";
          });
        }
        return onLoad(null, instances);
      }));
    };

    return _Class;

  })(BaseCollection);

}).call(this);
