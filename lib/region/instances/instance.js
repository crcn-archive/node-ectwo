// Generated by CoffeeScript 1.6.2
(function() {
  var Instance, comerr, outcome, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  comerr = require("comerr");

  _ = require("underscore");

  outcome = require("outcome");

  /*
  
  Server States:
  
  +--------+---------------+
  |  Code  |     State     |
  +--------+---------------+
  |   0    |    pending    | 
  |  16    |    running    |
  |  32    | shutting-down | 
  |  48    |  terminated   |
  |  64    |   stopping    | 
  |  80    |   stopped     |
  +--------+---------------
  */


  Instance = (function(_super) {
    __extends(Instance, _super);

    /*
    */


    function Instance(data, collection) {
      Instance.__super__.constructor.call(this, data, collection);
      this.api = collection.region.api;
      this.region = collection.region;
    }

    /*
    */


    Instance.prototype.destroy = function(next) {
      return this._runCommand("terminated", _.bind(this.terminate2, this, next), next);
    };

    /*
    */


    Instance.prototype.terminate2 = function(next) {
      return this._callAndWaitUntilState("TerminateInstances", "terminated", next);
    };

    /*
    */


    Instance.prototype.start = function(next) {
      return this._runCommand("running", _.bind(this._start2, this, next), next);
    };

    /*
    */


    Instance.prototype.address = function(cb) {
      return this.region.addresses.find({
        _id: this.get("address")
      }, cb);
    };

    /*
    */


    Instance.prototype.image = function(cb) {
      return this.region.images.find({
        _id: this.get("imageId")
      }, cb);
    };

    /*
    */


    Instance.prototype.createImage = function(options, next) {
      var o,
        _this = this;

      if (arguments.length === 1) {
        next = options;
        options = {};
      }
      options = {
        InstanceId: this.get("_id"),
        Name: options.name
      };
      o = outcome.e(next);
      return this.api.call("CreateImage", options, o.s(function(result) {
        return _this.region.images.wait({
          _id: result.imageId
        }, o.s(function(images) {
          return next(null, images[0]);
          /*
          copyTags @, image, { createdAt: Date.now() }, @_o.s () =>
             callback null, image
          */

        }));
      }));
    };

    /*
      secondary start function that bypasses the "running" check
    */


    Instance.prototype._start2 = function(callback) {
      var state,
        _this = this;

      state = this.get("state");
      if (/stopped/.test(state)) {
        this._callAndWaitUntilState("StartInstances", "running", callback);
      } else {

      }
      if (/shutting-down|stopping/.test(state)) {
        this.wait({
          state: /stopped|terminated/
        }, function() {
          return _this.start(callback);
        });
      } else {

      }
      if (/pending/.test(state)) {
        return this.wait({
          state: "running"
        }, callback);
      }
    };

    /*
    */


    Instance.prototype.stop = function(next) {
      return this._runCommand("stopped", _.bind(this._stop2, this, next), next);
    };

    /*
    */


    Instance.prototype._stop2 = function(callback) {
      var state,
        _this = this;

      state = this.get("state");
      if (/running/.test(state)) {
        this._callAndWaitUntilState("StopInstances", "stopped", callback);
      } else {

      }
      if (/stopping|shutting-down/.test(state)) {
        this.wait({
          state: /stopped|terminated/
        }, function() {
          return _this.stop(callback);
        });
      } else {

      }
      if (/pending/.test(state)) {
        return this.wait({
          state: "running"
        }, function() {
          return _this.stop(callback);
        });
      }
    };

    /*
    */


    Instance.prototype.restart = function(next) {
      var _this = this;

      return this.stop(outcome.e(next).s(function() {
        return _this.start(next);
      }));
    };

    /*
      Function: 
    
      Parameters:
    */


    Instance.prototype._runCommand = function(expectedState, runCommand, next) {
      var _this = this;

      return this.skip({
        state: expectedState
      }, next, function() {
        var state;

        state = _this.get("state");
        if (/terminated/.test(state)) {
          next(new comerr.NotFound("The instance has been terminated."));
        } else {

        }
        if (!/stopping|stopped|shutting-down|running|pending/.test(state)) {
          return next(new comerr.UnknownError("An unrecognized instance state was returned."));
        } else {
          return runCommand();
        }
      });
    };

    /*
    */


    Instance.prototype._callAndWaitUntilState = function(command, state, next) {
      var fn,
        _this = this;

      fn = null;
      if (typeof command !== "function") {
        fn = function(next) {
          return _this.api.call(command, {
            "InstanceId.1": _this.get("_id")
          }, outcome.e(next).s(function() {
            return next(null, _this);
          }));
        };
      } else {
        fn = command;
      }
      return fn(outcome.e(next).s(function() {
        return _this.wait({
          state: state
        }, next);
      }));
    };

    return Instance;

  })(require("../../base/regionModel"));

  module.exports = Instance;

}).call(this);
