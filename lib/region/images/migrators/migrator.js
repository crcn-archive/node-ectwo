// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, copyTags, outcome, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  outcome = require("outcome");

  copyTags = require("../../../utils/copyTags");

  EventEmitter = require("events").EventEmitter;

  /*
   Keeps tabs on the current progress for migrating an image.
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(image, snapshot) {
      this.image = image;
      this.snapshot = snapshot;
      this._start();
      this._o = outcome.e(this);
    }

    /*
    */


    _Class.prototype._start = function() {
      if (this._completed) {
        return;
      }
      this._stop();
      return this._timeout = setInterval(_.bind(this._updateProgress, this), 1000 * 5);
    };

    /*
    */


    _Class.prototype._stop = function() {
      return clearTimeout(this._timeout);
    };

    /*
    */


    _Class.prototype._updateProgress = function() {
      var _this = this;
      return this.snapshot.reload(function() {
        if ((_this._currentProgress === void 0) || (_this._currentProgress !== _this.snapshot.get("progress"))) {
          _this._currentProgress = _this.snapshot.get("progress") || 0;
          _this.emit("progress", _this._currentProgress);
        }
        if (_this.snapshot.get("progress") === 100) {
          return _this._registerImage();
        }
      });
    };

    /*
    */


    _Class.prototype._registerImage = function() {
      var o,
        _this = this;
      this._stop();
      o = this._o;
      return this.snapshot.registerImage({
        _id: this.snapshot.get("_id"),
        name: this.image.get("name"),
        architecture: this.image.get("architecture")
      }, o.s(function(image) {
        return copyTags(_this.image, image, o.s(function() {
          return _this.emit("complete", image);
        }));
      }));
    };

    return _Class;

  })(EventEmitter);

}).call(this);
