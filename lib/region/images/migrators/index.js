// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require("events").EventEmitter;

  /*
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(image, migrators) {
      var i, migrator, _i, _len, _ref;
      this.image = image;
      this.migrators = migrators;
      this._images = [];
      this._progresses = [];
      this.logger = this.image.logger.child("migrator");
      _ref = this.migrators;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        migrator = _ref[i];
        this._progresses.push(0);
        this._watchMigrator(migrator, i);
      }
    }

    /*
    */


    _Class.prototype._watchMigrator = function(migrator, i) {
      var _this = this;
      migrator.on("progress", function(progress) {
        var newProgress, p, sum, _i, _len, _ref;
        _this._progresses[i] = progress;
        sum = 0;
        _ref = _this._progresses;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          sum += p;
        }
        newProgress = Math.round(sum / _this._progresses.length);
        if (_this._totalProgress === newProgress) {
          return;
        }
        _this._totalProgress = newProgress;
        _this.logger.info("progress=" + newProgress + "%");
        return _this.emit("progress", newProgress);
      });
      return migrator.on("complete", function(image) {
        _this._images.push(image);
        _this.logger.info("migrated to " + (image.get("region")) + ", " + _this._images.length + "/" + _this._progresses.length + " complete");
        if (_this._images.length === _this._progresses.length) {
          _this.logger.info("complete");
          return _this.emit("complete", _this._images);
        }
      });
    };

    return _Class;

  })(EventEmitter);

}).call(this);
