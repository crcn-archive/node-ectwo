// Generated by CoffeeScript 1.4.0
(function() {
  var BaseCollection, ImageModel, Tags, createInstance, gumbo, toarray, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  Tags = require("../tags");

  gumbo = require("gumbo");

  toarray = require("toarray");

  ImageModel = require("./image");

  BaseCollection = require("../base/collection");

  createInstance = require("../../utils/createInstance");

  /*
   A collection of ALL Amazon Machine Images
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(region) {
      _Class.__super__.constructor.call(this, region, {
        modelClass: ImageModel,
        name: "image"
      });
    }

    /*
       creates a new instance
    */


    _Class.prototype.createInstance = function(options, callback) {
      if (typeof options !== "object") {
        throw new Error("options must be an object");
      }
      return createInstance(this.region, options, callback);
    };

    /*
       Loads the remote collection
    */


    _Class.prototype._load = function(options, onLoad) {
      var search,
        _this = this;
      search = {
        "Owner.1": "self"
      };
      if (options._id) {
        search = {
          "ImageId.1": options._id
        };
      }
      return this.ec2.call("DescribeImages", search, this._o.e(onLoad).s(function(result) {
        var images;
        images = toarray(result.imagesSet.item).map(function(image) {
          return {
            _id: image.imageId,
            state: image.imageState,
            ownerId: image.imageOwnerId,
            isPublic: image.isPublic,
            name: image.name,
            type: image.imageType,
            kernelId: image.kernelId,
            platform: (image.platform || "linux").toLowerCase(),
            architecture: image.architecture,
            description: image.description,
            virtualizationType: image.virtualizationType,
            tags: Tags.transformTags(image)
          };
        });
        return _this.region.snapshots.load(function() {
          return onLoad(null, images);
        });
      }));
    };

    return _Class;

  })(BaseCollection);

}).call(this);
