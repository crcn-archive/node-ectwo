// Generated by CoffeeScript 1.4.0
(function() {
  var BaseModel, Migrator, Migrators, Tags, allRegions, async, createInstance, findOneOrErr, gumbo, outcome, stepc, tagsToObject, toarray,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Tags = require("../tags");

  stepc = require("stepc");

  gumbo = require("gumbo");

  async = require("async");

  toarray = require("toarray");

  outcome = require("outcome");

  Migrator = require("./migrators/migrator");

  Migrators = require("./migrators");

  BaseModel = require("../base/model");

  allRegions = require("../../utils/regions");

  tagsToObject = require("../../utils/tagsToObject");

  findOneOrErr = require("../../utils/findOneOrErr");

  createInstance = require("../../utils/createInstance");

  /*
  
  Server States:
  
  +--------+---------------+
  |  Code  |     State     |
  +--------+---------------+
  |   ?    |    pending    | 
  |   ?    |    available  |
  +--------+---------------+
  */


  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(collection, region, item) {
      _Class.__super__.constructor.call(this, collection, region, item);
      this.tags = new Tags(this);
    }

    /*
        Function: createServer
      
        creates a new server from the AMI
    
        Parameters:
    */


    _Class.prototype.createInstance = function(options, callback) {
      var _this = this;
      if (arguments.length === 1) {
        callback = options;
        options = {};
      }
      this.logger.info("create server " + (this.get('_id')));
      options.imageId = this.get("_id");
      options.tags = tagsToObject(this.get("tags") || []);
      return this.waitUntilSync({
        state: "available"
      }, function() {
        return createInstance(_this.region, options, callback);
      });
    };

    /*
    */


    _Class.prototype.getSnapshot = function(callback) {
      return this.region.snapshots.syncAndFindOne({
        imageId: this.get("_id")
      }, callback);
    };

    /*
    */


    _Class.prototype.getOneSpotPricing = function(search, callback) {
      if (typeof search === "function") {
        callback = search;
        search = {};
      }
      search.platform = this.get("platform");
      return findOneOrErr(this.region.spotRequests, search, callback);
    };

    /*
    */


    _Class.prototype.createSpotRequest = function(options, callback) {
      options.imageId = this.get("imageId");
      return this.region.spotRequests.create(options, callback);
    };

    /*
       TODO - this needs to be a job. Migrating instances
       may take a long time, and we can't have this shoved into memory. - perhaps
       copy a snapshot & provide directions for initialization in the description.
    */


    _Class.prototype.migrate = function(regions, callback) {
      var o,
        _this = this;
      this.logger.info("migrate");
      o = this._o.e(callback);
      return this.getSnapshot(o.s(function(snapshot) {
        return async.map(toarray(regions), (function(region, next) {
          return region.snapshots.copy({
            "_id": snapshot.get("_id"),
            "region": snapshot.get("region"),
            "description": _this.get("description")
          }, outcome.e(next).s(function(snapshot) {
            return next(null, new Migrator(_this, snapshot));
          }));
        }), o.s(function(migrators) {
          return callback(null, new Migrators(_this, migrators));
        }));
      }));
    };

    /*
        Function: removes the AMI 
    
        Parameters:
    */


    _Class.prototype.destroy = function(callback) {
      var o,
        _this = this;
      o = this._o.e(callback);
      return this._ec2.call("DeregisterImage", {
        "ImageId": this.get("_id")
      }, this._o.s(function() {
        return _this.getSnapshot(o.s(function(snapshot) {
          return snapshot.destroy(callback);
        }));
      }));
    };

    return _Class;

  })(BaseModel);

}).call(this);
