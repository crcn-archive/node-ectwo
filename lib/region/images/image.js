// Generated by CoffeeScript 1.4.0
(function() {
  var BaseModel, Tags, allRegions, createInstance, gumbo, outcome, stepc, tagsToObject,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gumbo = require("gumbo");

  stepc = require("stepc");

  outcome = require("outcome");

  allRegions = require("../../utils/regions");

  createInstance = require("../../utils/createInstance");

  BaseModel = require("../base/model");

  Tags = require("../tags");

  tagsToObject = require("../../utils/tagsToObject");

  module.exports = (function(_super) {

    __extends(_Class, _super);

    /*
    */


    function _Class(collection, region, item) {
      _Class.__super__.constructor.call(this, collection, region, item);
      this.tags = new Tags(this);
    }

    /*
        Function: createServer
      
        creates a new server from the AMI
    
        Parameters:
    */


    _Class.prototype.createInstance = function(options, callback) {
      ectwo_log.log("%s: create server", this.region.name);
      options.imageId = this.get("imageId");
      options.tags = tagsToObject(this.get("tags"));
      return createInstance(this.region, options, callback);
    };

    /*
    */


    _Class.prototype.getOneSpotPricing = function(search, callback) {
      if (typeof search === "function") {
        callback = search;
        search = {};
      }
      search.platform = this.get("platform");
      return this.region.spotRequests.pricing.findOne(search, callback);
    };

    /*
    */


    _Class.prototype.createSpotRequest = function(options, callback) {
      options.imageId = this.get("imageId");
      return this.region.spotRequests.create(options, callback);
    };

    /*
       TODO
    */


    _Class.prototype.migrate = function(toRegions, callback) {};

    /*
        Function: removes the AMI 
    
        Parameters:
    */


    _Class.prototype.destroy = function(callback) {
      return this._ec2.call("DeregisterImage", {
        "ImageId": this.get("_id")
      }, callback);
    };

    return _Class;

  })(BaseModel);

}).call(this);
