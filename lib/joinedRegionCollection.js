// Generated by CoffeeScript 1.4.0
(function() {
  var ControllerFactory, async, cstep, flatten, outcome;

  async = require("async");

  cstep = require("cstep");

  outcome = require("outcome");

  flatten = require("flatten");

  ControllerFactory = (function() {
    /*
    */

    function ControllerFactory(joinedCollection) {
      this.joinedCollection = joinedCollection;
      cstep(this).add(joinedCollection);
    }

    /*
    */


    ControllerFactory.prototype.addControllerClass = cstep(function(search, clazz, next) {
      var region, _i, _len, _ref;
      _ref = this.joinedCollection._regions();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        region = _ref[_i];
        region[this.joinedCollection.collectionType].controllerFactory.addControllerClass(search, clazz);
      }
      return next();
    });

    return ControllerFactory;

  })();

  module.exports = (function() {
    /*
        Function: 
    
        Parameters:
    */

    function _Class(ectwo, collectionType) {
      this.ectwo = ectwo;
      this.collectionType = collectionType;
    }

    /*
        Function: 
    
        Parameters:
    */


    _Class.prototype.load = function() {
      cstep(this).add(this.ectwo);
      return this.controllerFactory = new ControllerFactory(this);
    };

    /*
        Function: 
    
        searches through ALL the data centers for servers with the given query
    
        Parameters:
    */


    _Class.prototype.find = cstep(function(query, callback) {
      var _this = this;
      return async.map(this._regions(), (function(region, next) {
        return region[_this.collectionType].find(query).exec(next);
      }), outcome.e(callback).s(function(results) {
        return callback(null, flatten(results));
      }));
    });

    /*
        Function: 
    
        Parameters:
    */


    _Class.prototype.findOne = cstep(function(query, callback) {
      var calledBack, onItem,
        _this = this;
      calledBack = false;
      onItem = function(item) {
        if (calledBack) {
          return;
        }
        calledBack = true;
        return callback(null, item);
      };
      return async.forEach(this._regions(), (function(region, next) {
        return region[_this.collectionType].findOne(query).exec(function(err, item) {
          if (item) {
            onItem(item);
          }
          return next();
        });
      }), function() {
        return onItem(null);
      });
    });

    /*
    */


    _Class.prototype.findAll = function(callback) {
      return this.find((function() {
        return true;
      }), callback);
    };

    /*
        Function: 
    
        Parameters:
    */


    _Class.prototype._regions = function() {
      return this.ectwo.regions.findAll().sync();
    };

    return _Class;

  })();

}).call(this);
