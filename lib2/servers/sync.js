// Generated by CoffeeScript 1.4.0
(function() {
  var BaseSync, ServerModel, stepc, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  BaseSync = require("../base/sync");

  stepc = require("stepc");

  ServerModel = require("./model");

  module.exports = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    /*
        Function: updates 
    
        Updates the collection with the newest server info from EC2.
        Note - this is really only important for inserting NEW ec2 instances, since
        each server does a fetch for new information periodically
    
        Parameters:
    */


    _Class.prototype.update = function(callback) {
      var _this = this;
      return this.ec2.call("DescribeInstances", {}, function(err, result) {
        var key, serverIds, servers, serversById, _results;
        serversById = {};
        servers = result.reservationSet.item.map(function(server) {
          return server.instancesSet.item;
        });
        serverIds = servers.map(function(server) {
          serversById[server.imageId] = server;
          return server.imageId;
        });
        _this.target.collection.find({
          imageId: {
            $in: [serverIds]
          }
        }).sync().forEach(function(item) {
          var imageId;
          imageId = item.get("imageId");
          item.update(serversById[imageId]);
          return delete serversById[imageId];
        });
        _results = [];
        for (key in serversById) {
          _results.push(_this.target.collection.insert(serversById[key]));
        }
        return _results;
      });
    };

    return _Class;

  })(BaseSync);

}).call(this);
